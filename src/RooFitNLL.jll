"""
    RooFitNLL(normalized_predictions, observations; normalization)

Computes the negative log-likelihood for a binned distribution fit.
- `normalized_predictions`: A vector of normalized prediction at each bin-center.
- `observations`: A vector of observed values at each bin-center.
- `normalization`: A scalar value for normalization. Conceptually equal to the pdf generateing `predictions` integrated over the domain.

"""
function RooFitNLL(normalized_predictions, observations; normalization)
    per_bin_term = sum(@. observations * log(normalized_predictions))
    extend_term = sum(observations)*log(normalization) - normalization

    return -per_bin_term - extend_term
end
"""
    RooFitNLL_functor(d::ExtendPdf, data_hist::Hist1D; num_integrator=SimpleSumIntegrator())

Given an pdf and a data histogram, return a callable function that evaluates to the negative log likelihood with respect to the data histogram within the `d.support` domain.

The callable function should be called with N+1 parameter, the +1 being the first argument represening the overall # of events. For example, if user-defined function is `f(x, p) = x*p[1] + x^2*p[2]`, then the functor should be called with `[norm, p1, p2]`.
"""
function RooFitNLL_functor(d::ExtendPdf, data_hist::Hist1D; num_integrator=SimpleSumIntegrator())
    bes, bcs = binedges(data_hist), bincenters(data_hist)
    observations = bincounts(data_hist)
    @assert extrema(bes) == extrema(d.support) "The support of the distribution must match the bin edges of the histogram."

    function (norm_and_xs...; kw...)
        norm, xs... = norm_and_xs
        predictions = d.func.(bcs, Ref.(xs)...; kw...)

        oneD_func(x) = d.func(x, xs...; kw...)
        numerical_int = _integrate(oneD_func, data_hist, num_integrator)
        normalized_predictions = predictions ./ numerical_int
        return RooFitNLL(normalized_predictions, observations; normalization=norm)
    end
end

